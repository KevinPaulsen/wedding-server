// src/pages/rsvp/RsvpReceptionPage.tsx
import React from 'react';
import { Form, Table, Button } from 'react-bootstrap';
import { useFlow } from '../../../context/FlowProvider';
import { useNavigate } from 'react-router-dom';
import { useSubmitRsvp } from '../../../hooks/rsvp/useSubmitRsvp';

const RsvpReceptionPage: React.FC = () => {
    const { formData, setFormData, resetFormData } = useFlow();
    const { execute: doSubmit, error, loading } = useSubmitRsvp();
    const navigate = useNavigate();

    const guestList = formData.guest_list || {};
    const reception = formData.reception;

    if (!reception) {
        navigate('/rsvp/confirmation');
        return null;
    }

    const handleCheck = (guestId: string) => {
        const updated = reception.guests_attending.includes(guestId)
            ? reception.guests_attending.filter((id) => id !== guestId)
            : [...reception.guests_attending, guestId];

        setFormData({
            reception: {
                ...reception,
                guests_attending: updated,
            },
        });
    };

    const handleSubmit = async () => {
        // Attempt final submission
        await doSubmit(formData);

        // If no error after finishing, reset local form data & navigate
        if (!error) {
            resetFormData();
            navigate('/rsvp/confirmation');
        }
    };

    return (
        <div className="p-3">
            <h3>Reception Attendance</h3>
            {error && <div className="alert alert-danger">{error}</div>}
            {reception.allowed_guests <= 0 ? (
                <p>You have no Reception invitation.</p>
            ) : (
                <Table striped bordered hover>
                    <thead>
                    <tr>
                        <th>Guest</th>
                        <th>Attending?</th>
                    </tr>
                    </thead>
                    <tbody>
                    {Object.entries(guestList).map(([id, guest]) => (
                        <tr key={id}>
                            <td>{guest.display_name}</td>
                            <td>
                                <Form.Check
                                    type="checkbox"
                                    checked={reception.guests_attending.includes(id)}
                                    onChange={() => handleCheck(id)}
                                />
                            </td>
                        </tr>
                    ))}
                    </tbody>
                </Table>
            )}

            <Button onClick={handleSubmit} disabled={loading}>
                {loading ? 'Submitting...' : 'Submit'}
            </Button>
        </div>
    );
};

export default RsvpReceptionPage;
// src/pages/rsvp/RsvpCeremonyPage.tsx
import React from 'react';
import { Form, Table, Button } from 'react-bootstrap';
import { useFlow } from '../../../context/FlowProvider';
import { useNavigate } from 'react-router-dom';

const RsvpCeremonyPage: React.FC = () => {
    const { formData, setFormData } = useFlow();
    const navigate = useNavigate();

    const guestList = formData.guest_list || {};
    const ceremony = formData.ceremony;

    if (!ceremony) {
        navigate('/rsvp/reception');
        return null;
    }

    const handleCheck = (guestId: string) => {
        const updated = ceremony.guests_attending.includes(guestId)
            ? ceremony.guests_attending.filter((id) => id !== guestId)
            : [...ceremony.guests_attending, guestId];

        setFormData({
            ceremony: {
                ...ceremony,
                guests_attending: updated,
            },
        });
    };

    const handleNext = () => {
        navigate('/rsvp/reception');
    };

    return (
        <div className="p-3">
            <h3>Ceremony Attendance</h3>
            {ceremony.allowed_guests <= 0 ? (
                <p>You have no Ceremony invitation.</p>
            ) : (
                <Table striped bordered hover>
                    <thead>
                    <tr>
                        <th>Guest</th>
                        <th>Attending?</th>
                    </tr>
                    </thead>
                    <tbody>
                    {Object.entries(guestList).map(([id, guest]) => (
                        <tr key={id}>
                            <td>{guest.display_name}</td>
                            <td>
                                <Form.Check
                                    type="checkbox"
                                    checked={ceremony.guests_attending.includes(id)}
                                    onChange={() => handleCheck(id)}
                                />
                            </td>
                        </tr>
                    ))}
                    </tbody>
                </Table>
            )}
            <Button onClick={handleNext}>Next</Button>
        </div>
    );
};

export default RsvpCeremonyPage;
// src/pages/rsvp/RsvpVerificationPage.tsx
import React, { useRef, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Form, Button } from 'react-bootstrap';
import CustomInputField from '../CustomInputField';
import { useFlow } from '../../../context/FlowProvider';
import { useLookupRsvp } from '../../../hooks/rsvp/useLookupRsvp';

const RsvpVerificationPage: React.FC = () => {
    const navigate = useNavigate();
    const { setFormData } = useFlow();
    const firstNameRef = useRef<any>(null);
    const codeRef = useRef<any>(null);

    const { data, error, loading, execute: doLookup } = useLookupRsvp();

    const [form, setForm] = useState({
        firstName: '',
        lastName: '',
    });

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setForm({
            ...form,
            [e.target.name]: e.target.value,
        });
    };

    const handleNext = async () => {
        const validFirst = firstNameRef.current.validate();
        const validCode = codeRef.current.validate();

        if (!validFirst || !validCode) {
            return;
        }

        // We call lookup with first_name = form.firstName, last_name = form.rsvpCode
        await doLookup({ first_name: form.firstName, last_name: form.lastName });
    };

    // If data changes (meaning the request succeeded), pick the first RSVP.
    if (data && data.length > 0) {
        // In a real scenario you might handle multiple. Here we assume only one:
        setFormData(data[0]); // store the found Rsvp in FlowContext
        navigate('/rsvp/primary');
    }

    return (
        <div className="p-3">
            <h3>RSVP Verification</h3>
            {error && <div className="alert alert-danger">{error}</div>}

            <Form>
                <CustomInputField
                    ref={firstNameRef}
                    name="firstName"
                    type="text"
                    placeholder="Enter First Name"
                    value={form.firstName}
                    onChange={handleChange}
                />

                <CustomInputField
                    ref={codeRef}
                    name="lastName"
                    type="text"
                    placeholder="Enter RSVP Code"
                    value={form.lastName}
                    onChange={handleChange}
                />

                <Button onClick={handleNext} disabled={loading}>
                    {loading ? 'Validating...' : 'Next'}
                </Button>
            </Form>
        </div>
    );
};

export default RsvpVerificationPage;
// CancelButton.tsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { useFlow } from '../../../context/FlowProvider';
import { Button } from 'react-bootstrap';
import '../../../styles/rsvp/RsvpButtons.css';

interface CancelButtonProps {
    route: string;
}

const CancelButton: React.FC<CancelButtonProps> = ({ route }) => {
    const navigate = useNavigate();
    const { resetFormData, resetStepState } = useFlow();

    const handleCancel = () => {
        resetFormData();
        resetStepState();
        navigate(route);
    };

    return (
        <Button className='rsvp-button dark wire hover' onClick={handleCancel}>
            Cancel
        </Button>
    );
};

export default CancelButton;
// src/pages/rsvp/RsvpConfirmation.tsx
import React from 'react';
import { Button } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';

const RsvpConfirmation: React.FC = () => {
    const navigate = useNavigate();

    const handleReturnHome = () => {
        navigate('/');
    };

    return (
        <div className="p-3 text-center">
            <h3>Thank You!</h3>
            <p>Your RSVP has been successfully submitted.</p>
            <Button onClick={handleReturnHome}>Return Home</Button>
        </div>
    );
};

export default RsvpConfirmation;
// src/pages/rsvp/RsvpRehearsalPage.tsx
import React from 'react';
import { Form, Table, Button } from 'react-bootstrap';
import { useFlow } from '../../../context/FlowProvider';
import { useNavigate } from 'react-router-dom';

const RsvpRehearsalPage: React.FC = () => {
    const { formData, setFormData } = useFlow();
    const navigate = useNavigate();

    const guestList = formData.guest_list || {};
    const rehearsal = formData.rehearsal;

    if (!rehearsal) {
        navigate('/rsvp/ceremony');
        return null;
    }

    const handleCheck = (guestId: string) => {
        const updated = rehearsal.guests_attending.includes(guestId)
            ? rehearsal.guests_attending.filter((id) => id !== guestId)
            : [...rehearsal.guests_attending, guestId];

        setFormData({
            rehearsal: {
                ...rehearsal,
                guests_attending: updated,
            },
        });
    };

    const handleNext = () => {
        navigate('/rsvp/ceremony');
    };

    return (
        <div className="p-3">
            <h3>Rehearsal Attendance</h3>
            {rehearsal.allowed_guests <= 0 ? (
                <p>You have no Rehearsal invitation.</p>
            ) : (
                <Table striped bordered hover>
                    <thead>
                    <tr>
                        <th>Guest</th>
                        <th>Attending?</th>
                    </tr>
                    </thead>
                    <tbody>
                    {Object.entries(guestList).map(([id, guest]) => (
                        <tr key={id}>
                            <td>{guest.display_name}</td>
                            <td>
                                <Form.Check
                                    type="checkbox"
                                    checked={rehearsal.guests_attending.includes(id)}
                                    onChange={() => handleCheck(id)}
                                />
                            </td>
                        </tr>
                    ))}
                    </tbody>
                </Table>
            )}
            <Button onClick={handleNext}>Next</Button>
        </div>
    );
};

export default RsvpRehearsalPage;
// RsvpFormStep.tsx
import React from "react";
import RsvpConfirmation from "./RsvpConfirmation";
import RsvpVerificationPage from "./RsvpVerificationPage";
import RsvpPrimaryContactPage from "./RsvpPrimaryContactPage";
import RsvpGuestDetailsPage from "./RsvpGuestDetailsPage";
import RsvpRocePage from "./RsvpRocePage";
import RsvpRehearsalPage from "./RsvpRehearsalPage";
import RsvpCeremonyPage from "./RsvpCeremonyPage";
import RsvpReceptionPage from "./RsvpReceptionPage";

interface RsvpFormStepProps {
    step: number;
    changePage: (step: number) => void;
    requireAnswers?: boolean;
    returnPage?: string | null;
}

interface RsvpLayoutProps {
    title: string;
    component: React.ReactNode;
}

const RSVPFormStep: React.FC<RsvpFormStepProps> = ({
                                                       step,
                                                       changePage,
                                                       requireAnswers = true,
                                                       returnPage = null,
                                                   }) => {
    switch (step) {
        case RSVP_VERIFICATION_PAGE:
            return <RsvpFormLayout title="Confirmation" component={<RsvpVerificationPage />} />
        case RSVP_PRIMARY_CONTACT_PAGE:
            return <RsvpFormLayout title="Confirmation" component={<RsvpPrimaryContactPage />} />
        case RSVP_GUEST_DETAILS_PAGE:
            return <RsvpFormLayout title="Confirmation" component={<RsvpGuestDetailsPage />} />
        case RSVP_ROCE_PAGE:
            return <RsvpFormLayout title="Confirmation" component={<RsvpRocePage />} />
        case RSVP_REHEARSAL_PAGE:
            return <RsvpFormLayout title="Confirmation" component={<RsvpRehearsalPage />} />
        case RSVP_CEREMONY_PAGE:
            return <RsvpFormLayout title="Confirmation" component={<RsvpCeremonyPage />} />
        case RSVP_RECEPTION_PAGE:
            return <RsvpFormLayout title="Confirmation" component={<RsvpReceptionPage />} />
        case RSVP_CONFIRMATION_PAGE:
            return <RsvpFormLayout title="Confirmation" component={<RsvpConfirmation />} />
        default:
            return <div>Unknown Step</div>;
    }
};

const RsvpFormLayout: React.FC<RsvpLayoutProps> = ({ title, component }) => {
    return (
        <div>
            <h3>{title}</h3>
            {component}
        </div>
    );
};

export const RSVP_VERIFICATION_PAGE = 1;
export const RSVP_PRIMARY_CONTACT_PAGE = 2;
export const RSVP_GUEST_DETAILS_PAGE = 3;
export const RSVP_ROCE_PAGE = 4;
export const RSVP_REHEARSAL_PAGE = 5;
export const RSVP_CEREMONY_PAGE = 6;
export const RSVP_RECEPTION_PAGE = 7;
export const RSVP_CONFIRMATION_PAGE = 8;

export default RSVPFormStep;
// src/pages/rsvp/RsvpRocePage.tsx
import React from 'react';
import { Form, Table, Button } from 'react-bootstrap';
import { useFlow } from '../../../context/FlowProvider';
import { useNavigate } from 'react-router-dom';

const RsvpRocePage: React.FC = () => {
    const { formData, setFormData } = useFlow();
    const navigate = useNavigate();

    const guestList = formData.guest_list || {};
    const roce = formData.roce;

    if (!roce) {
        // If for some reason roce is null, skip
        navigate('/rsvp/rehearsal');
        return null;
    }

    const handleCheck = (guestId: string) => {
        const alreadyAttending = roce.guests_attending || [];
        const updated = alreadyAttending.includes(guestId)
            ? alreadyAttending.filter((id) => id !== guestId)
            : [...alreadyAttending, guestId];

        setFormData({
            roce: {
                ...roce,
                guests_attending: updated,
            },
        });
    };

    const handleNext = () => {
        navigate('/rsvp/rehearsal');
    };

    return (
        <div className="p-3">
            <h3>Roce Attendance</h3>
            {roce.allowed_guests <= 0 ? (
                <p>You have no Roce invitation.</p>
            ) : (
                <Table striped bordered hover>
                    <thead>
                    <tr>
                        <th>Guest</th>
                        <th>Attending?</th>
                    </tr>
                    </thead>
                    <tbody>
                    {Object.entries(guestList).map(([id, guest]) => (
                        <tr key={id}>
                            <td>{guest.display_name}</td>
                            <td>
                                <Form.Check
                                    type="checkbox"
                                    checked={roce.guests_attending?.includes(id) || false}
                                    onChange={() => handleCheck(id)}
                                />
                            </td>
                        </tr>
                    ))}
                    </tbody>
                </Table>
            )}

            <Button onClick={handleNext}>Next</Button>
        </div>
    );
};

export default RsvpRocePage;
// src/pages/rsvp/RsvpPrimaryContactPage.tsx
import React, { useRef } from 'react';
import { Form, Button } from 'react-bootstrap';
import CustomInputField from '../CustomInputField';
import { useFlow } from '../../../context/FlowProvider';
import { useNavigate } from 'react-router-dom';

const RsvpPrimaryContactPage: React.FC = () => {
    const { formData, setFormData } = useFlow();
    const navigate = useNavigate();

    const nameRef = useRef<any>(null);
    const emailRef = useRef<any>(null);
    const addressRef = useRef<any>(null);
    const phoneRef = useRef<any>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setFormData({
            primary_contact: {
                ...formData.primary_contact,
                [e.target.name]: e.target.value,
            },
        });
    };

    const handleNext = () => {
        const validName = nameRef.current.validate();
        const validEmail = emailRef.current.validate();
        const validAddress = addressRef.current.validate();
        const validPhone = phoneRef.current.validate();

        if (validName && validEmail && validAddress && validPhone) {
            navigate('/rsvp/guests');
        }
    };

    return (
        <div className="p-3">
            <h3>Primary Contact Information</h3>
            <Form>
                <CustomInputField
                    ref={nameRef}
                    name="name"
                    placeholder="Full Name"
                    value={formData.primary_contact?.name ?? ''}
                    onChange={handleChange}
                />
                <CustomInputField
                    ref={emailRef}
                    name="email"
                    type="email"
                    placeholder="Email"
                    value={formData.primary_contact?.email ?? ''}
                    onChange={handleChange}
                />
                <CustomInputField
                    ref={addressRef}
                    name="address"
                    placeholder="Address"
                    value={formData.primary_contact?.address ?? ''}
                    onChange={handleChange}
                />
                <CustomInputField
                    ref={phoneRef}
                    name="phone_number"
                    placeholder="Phone Number"
                    value={formData.primary_contact?.phone_number ?? ''}
                    onChange={handleChange}
                />

                <Button onClick={handleNext}>Next</Button>
            </Form>
        </div>
    );
};

export default RsvpPrimaryContactPage;
// src/pages/rsvp/RsvpGuestDetailsPage.tsx
import React from 'react';
import { Table, Button } from 'react-bootstrap';
import { useFlow } from '../../../context/FlowProvider';
import { useNavigate } from 'react-router-dom';
// Example: you might create a small form or modal to edit details. Omitted for brevity.

const RsvpGuestDetailsPage: React.FC = () => {
    const navigate = useNavigate();
    const { formData } = useFlow();
    const guests = formData.guest_list || {};

    // Example: handle editing a single guest
    const handleEditGuest = (id: string) => {
        // Optionally navigate to an "EditGuest" page or open a modal
        // For now, just console log
        console.log('Editing guest:', id);
    };

    // Example: handle next
    const handleNext = () => {
        navigate('/rsvp/roce');
    };

    return (
        <div className="p-3">
            <h3>Guest Details</h3>

            {Object.keys(guests).length === 0 ? (
                <div>No guests found.</div>
            ) : (
                <Table striped bordered hover>
                    <thead>
                    <tr>
                        <th>Display Name</th>
                        <th>Dietary Restrictions</th>
                        <th>Other</th>
                        <th>Edit</th>
                    </tr>
                    </thead>
                    <tbody>
                    {Object.entries(guests).map(([id, guest]) => (
                        <tr key={id}>
                            <td>{guest.display_name}</td>
                            <td>
                                {guest.dietary_restrictions && guest.dietary_restrictions.length > 0
                                    ? guest.dietary_restrictions.join(', ')
                                    : 'None'}
                            </td>
                            <td>{guest.other || ''}</td>
                            <td>
                                <Button size="sm" onClick={() => handleEditGuest(id)}>
                                    Edit
                                </Button>
                            </td>
                        </tr>
                    ))}
                    </tbody>
                </Table>
            )}

            {/* Example: Add new guest button if desired */}
            <div className="mt-3">
                <Button variant="primary" onClick={handleNext}>
                    Next
                </Button>
            </div>
        </div>
    );
};

export default RsvpGuestDetailsPage;
