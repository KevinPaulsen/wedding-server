.title {
    font-size: clamp(1em, 4vw + 1em, 6em);
}

.custom-button {
    border-radius: 0;
    height: 40px;
    width: 80px;
}

.custom-button.light {
    background: var(--main-light);
    color: var(--main-dark);
    border: 2px solid var(--main-light);
}

.custom-button.dark {
    background: var(--main-dark);
    color: var(--main-light);
    border: 2px solid var(--main-dark);
}

.custom-button:hover {
    background: var(--hover-dark);
    color: var(--main-light);
}

.custom-button:focus,
.custom-button:active {
    background: var(--main-dark) !important;
    border-color: var(--main-dark) !important;
    color: var(--main-light);
}

.nav-link {
    color: var(--main-dark);
    font-size: 1.2em;
    text-decoration: none;
}

.nav-link:hover {
    text-decoration: underline;
}

.home-button {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;

    width: 50px;
    height: 50px;

    background-color: transparent;
    border: none;
    color: var(--main-dark);
    overflow: visible;
}

.home-button svg {
    position: absolute;
    font-size: 40px;
}


.home-button:hover,
.home-button:focus,
.home-button:active,
.home-button:focus-visible {
    background: transparent !important;
    color: var(--hover-dark) !important;
}
.menu-button-container {
    position: relative;
}

.menu-button-container.above-overlay {
    z-index: 1002;
}

.menu-button {
    display: flex;
    align-items: center;
    justify-content: center;

    background: transparent;
    width: 50px;
    height: 50px;
    transition: background 0.3s ease;
    border: none;
}

.menu-button.open .line {
    background-color: var(--main-light)
}

.menu-button:hover,
.menu-button:focus,
.menu-button:active,
.menu-button:focus-visible {
    background: transparent !important;
    box-shadow: none !important; /* Remove focus outline */
    outline: none !important; /* Remove outline on focus */
}

.menu-icon {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    width: 25px;
    height: 25px;
}

.line {
    height: 3px;
    width: 100%;
    background-color: var(--main-dark);
    transition: all 0.3s ease;
}

.open .top-line {
    transform: translateY(11px) rotate(45deg);
}

.open .middle-line {
    opacity: 0;
}

.open .bottom-line {
    transform: translateY(-11px) rotate(-45deg);
}

.fullscreen-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--main-dark);
    visibility: hidden;
    opacity: 0;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    transition: opacity 0.3s ease, visibility 0.3s ease;
}

.fullscreen-overlay .container {
    display: flex;
    flex-direction: column;
}

.fullscreen-overlay.show {
    visibility: visible;
    opacity: 1;
}

.menu-link {
    color: var(--main-light);
    font-size: 2rem;
    margin-bottom: 2rem;
    text-decoration: none;
    transition: color 0.3s;
}

.menu-link:hover {
    text-decoration: underline;
}

.story {
    color: var(--main-dark);
    background: none;
}

.gallery-image {
    width: 100%;
    max-width: 200px;
}:root {
    /* Layout / Sizing */
    --container-width: 95%;
    --container-margin: 2rem auto;
    --spiral-top-offset: 0;

    /* Vertical line */
    --timeline-top-offset: 50px;
    --line-width: 3px;

    /* Timeline items */
    --timeline-item-padding: 1rem;
    --timeline-item-gap: calc(var(--circle2-size) / 2 - 1px);     /* Gap between item edge and center line */

    /* Horizontal connector */
    --connector-width: 25%;        /* Enough to span from item edge to vertical center */

    /* Event content offsets */
    --event-transform-y: -52%;     /* How far up/down to shift event content */
    --event-offset: calc(var(--connector-width) - 18px);

    /* Bullseye circles */
    --circle1-size: calc(var(--arc-container-diamater) - 2 * var(--line-width));
    --circle2-size: 25px;
    --circle3-size: 12px;

    /* Arc sizes */
    --arc-container-diamater: 45px;
    --half-arc-container-width: calc(var(--arc-container-diamater) / 2);
    --half-arc-container-height: var(--arc-container-diamater);
}

/************************************************
 * TIMELINE CONTAINER & VERTICAL CENTER LINE
 ************************************************/
.timeline-container {
    position: relative;
    width: var(--container-width);
    margin: var(--container-margin);
}

/* The spiral at the top */
.spiral-top {
    position: absolute;
    top: var(--spiral-top-offset);
    left: 50%;
    transform: translateX(-50%);
}

/* Main vertical line down the center of the container */
.timeline-container::before {
    content: "";
    position: absolute;
    top: var(--timeline-top-offset);
    bottom: 0;
    left: 50%;
    width: var(--line-width);
    background: var(--main-dark);
    transform: translateX(-50%);
    z-index: 0; /* behind everything else */
}

/************************************************
 * TIMELINE ITEM (ABSOLUTE POSITION)
 ************************************************/
.timeline-item {
    position: absolute;
    width: calc(50% - var(--timeline-item-gap));
    padding: var(--timeline-item-padding);
    text-align: center;
    /* No explicit z-index here, so it remains above the line’s z-index: 0 */
}

/* Left-side items: pinned to the left side */
.timeline-item.left {
    left: 0;
}

/* Right-side items: pinned to the right side */
.timeline-item.right {
    right: 0;
}

/************************************************
 * HORIZONTAL CONNECTOR (via ::after)
 ************************************************/
.timeline-item.left::after,
.timeline-item.right::after {
    content: "";
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: var(--connector-width);
    height: var(--line-width);
    background: var(--main-dark);
    z-index: 2; /* above circles */
}

/* For left items: extends from item’s right edge to center. */
.timeline-item.left::after {
    right: 0;
}

/* For right items: extends from item’s left edge to center. */
.timeline-item.right::after {
    left: 0;
}

/************************************************
 * EVENT CONTENT (TITLE/TIME, LOCATION, IMAGE)
 ************************************************/
.event-content {
    width: auto;
    height: fit-content;
    position: absolute;
    transform: translateY(var(--event-transform-y));
}

/* For left items: place content to the left of the intersection */
.timeline-item.left .event-content {
    right: var(--event-offset);
}

/* For right items: place content to the right of the intersection */
.timeline-item.right .event-content {
    left: var(--event-offset);
}

/* Center item special styling */
.timeline-item.center {
    width: auto;
    left: 50%;
    bottom: 0;
    transform: translateX(-50%);
    background: var(--main-light);
}

/* Title/time text */
.event-time {
    color: var(--main-dark);
    font-size: 20px;
    font-weight: bold;
    margin-bottom: 0.25rem;

    /* Fit content but still be centered */
    display: inline-block;
    width: fit-content;

    /* Center in the row */
    margin-left: auto;
    margin-right: auto;
}


.event-title {
    color: var(--main-dark);
    font-size: 20px;
    height: fit-content;
    font-weight: bold;
    justify-content: center;
    text-align: center;
}

/* Location below in orange */
.event-location {
    font-size: 19px;
    color: var(--accent-text);
    height: fit-content;
    justify-content: center;
    text-align: center;
}

/* Image placed above the text */
.event-image {
    display: block;
    align-content: end;
    max-width: 100px;
    margin: 0 auto 0.5rem;
}

/* Timeline.css */
.icon {
    width: 100px;           /* Adjust the size as needed */
    height: 100px;          /* Adjust the size as needed */
    background-color: var(--main-dark);
    display: block;
}

/************************************************
 * INTERSECTION BULLSEYE (3-LAYERED CIRCLES)
 ************************************************/
.intersection {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
}

/* For left items: place intersection at item’s right edge */
.timeline-item.left .intersection {
    left: calc(100% + var(--timeline-item-gap));
}

/* For right items: place intersection at item’s left edge */
.timeline-item.right .intersection {
    left: calc(-1 * var(--timeline-item-gap));
}

/* Center bullseye circles in .intersection */
.circle {
    position: absolute;
    top: 50%;
    left: 50%;
    border-radius: 50%;
    transform: translate(-50%, -50%);
    z-index: 3;
}

/* Circle #1 */
.circle-1 {
    width: var(--circle1-size);
    height: var(--circle1-size);
    background-color: var(--main-light);
}

/* Circle #2 */
.circle-2 {
    width: var(--circle2-size);
    height: var(--circle2-size);
    border: var(--line-width) solid var(--main-dark);
    background-color: var(--main-light);
    box-sizing: border-box;
    border-radius: 50%;
}

/* Circle #3 */
.circle-3 {
    width: var(--circle3-size);
    height: var(--circle3-size);
    background-color: var(--accent-text);
}

/************************************************
 * BASE ARC
 ************************************************/
.arc {
    position: absolute;
    overflow: hidden;
    width: var(--arc-container-diamater);
    height: var(--arc-container-diamater);
    z-index: 4;
}

.arc.half {
    width: var(--half-arc-container-width);
    height: var(--half-arc-container-height);
    overflow: hidden;
    position: absolute;
    transform: translate(-100%, -50%);
}

/* When the half arc is inside a left timeline item, shift it differently */
.timeline-item.left .arc.half {
    transform: translateY(-50%);
}

.arc.half::before {
    content: "";
    position: absolute;
    width: var(--arc-container-diamater);
    height: var(--arc-container-diamater);
    border: var(--line-width) solid var(--main-dark);
    border-radius: 50%;
}

/* Left Half Arc: shows the left half of the circle */
.arc.left-half::before {
    top: 0;
    left: 0px;
}

/* Right Half Arc: shows the right half of the circle */
.arc.right-half::before {
    top: 0;
    left: calc(-1 * var(--half-arc-container-width));
}
.main-image {
    object-fit: cover;
    object-position: 50% 38%;
    top: 0;
    left: 0;
    filter: brightness(50%);
}

.date-text {
    font-family: "Baskervville", serif;
    font-weight: 800;
    color: var(--main-light);
    display: flex;
    font-size: clamp(1em, 12vw + 1em, 15rem);
}// components/main/headerComponents/Title.tsx
import React from 'react';
import '../../../styles/Header.css';
import { Link } from 'react-router-dom';

interface TitleProps {
    color?: string;
    link?: boolean;
}

const Title: React.FC<TitleProps> = ({ color, link = true }) => {
    return link ? (
        <Link to="/" style={{ textDecoration: 'none' }}>
            <h1 className="title" style={{ color }}>{'Kevin & Olivia'}</h1>
        </Link>
    ) : (
        <h1 className="title" style={{ color }}>{'Kevin & Olivia'}</h1>
    );
};

export default Title;
// components/main/headerComponents/FullScreenMenu.tsx
import React, { useState } from 'react';
import { Button, Container, Row } from 'react-bootstrap';
import '../../../styles/FullScreenMenu.css';
import {Link, useNavigate} from 'react-router-dom';
import Title from "./Title";
import CustomButton from "../../shared/CustomButton";

const FullScreenMenu: React.FC = () => {
    const [menuOpen, setMenuOpen] = useState<boolean>(false);
    const navigate = useNavigate()

    const toggleMenu = () => {
        setMenuOpen(!menuOpen);
    };

    const handleRsvpClick = () => {
        navigate("/rsvp");
    }

    return (
        <>
            <div className={`d-sm-none menu-button-container ${menuOpen ? 'above-overlay' : ''}`}>
                <Button
                    onClick={toggleMenu}
                    className={`menu-button ${menuOpen ? 'open' : ''}`}
                    aria-label="Toggle Menu"
                >
                    <div className="menu-icon">
                        <div className="line top-line"></div>
                        <div className="line middle-line"></div>
                        <div className="line bottom-line"></div>
                    </div>
                </Button>
            </div>

            <div className={`fullscreen-overlay ${menuOpen ? 'show' : ''}`}>
                <Container className="h-100">
                    <Row className="mt-5 align-items-center" style={{ height: '50px' }}>
                        <Title color="var(--main-light)" />
                    </Row>
                    <Row className="flex-grow-1 d-flex flex-column justify-content-center align-items-center">
                        <Link to="/gallery" className="menu-link">Gallery</Link>
                        <Link to="/details" className="menu-link">Details</Link>
                        <Link to="/contact" className="menu-link">Contact</Link>
                        <Link to="/story" className="menu-link">Our Story</Link>
                    </Row>
                    <Row className="mb-5 justify-content-center align-items-center">
                        <CustomButton
                            text="RSVP"
                            onClick={handleRsvpClick}
                            variant="lightOutlined"
                            width="80px"
                            height="40px"
                        />
                    </Row>
                </Container>
            </div>
        </>
    );
};

export default FullScreenMenu;
// components/main/headerComponents/Header.tsx
import React from 'react';
import { Button, Col, Container, Row } from 'react-bootstrap';
import '../../../styles/Header.css';
import {Link, useNavigate} from 'react-router-dom';
import FullScreenMenu from "./FullScreenMenu";
import Title from "./Title";
import CustomButton from "../../shared/CustomButton";

const WeddingHeader: React.FC = () => {
    const navigate = useNavigate()

    const handleClick = () => {
        navigate("/rsvp");
    }

    return (
        <Container className="py-5 px-1 px-sm-5 text-center">
            {/* Header Row - HomePage Button, Stack Button, Title */}
            <Row className="g-0 align-items-center">
                <Col className="col-1 d-flex justify-content-start"></Col>
                <Col className="col-10 d-flex justify-content-center">
                    <Title />
                </Col>
                <Col className="col-1 d-flex justify-content-end">
                    <FullScreenMenu />
                </Col>
            </Row>

            {/* Content Row - RSVP Button, Navigation */}
            <Row className="g-0 mt-3 justify-content-center align-items-center d-sm-flex d-none" >
                {/* Left Links */}
                <Col className="d-flex justify-content-end text-center flex-grow-1 gap-3">
                    <Link to="/gallery" className="nav-link">Gallery</Link>
                    <Link to="/details" className="nav-link">Details</Link>
                </Col>

                {/* Centered Button */}
                <Col xs="auto" className="mx-3">
                    <CustomButton
                        text="RSVP"
                        onClick={handleClick}
                        variant="dark"
                        width="80px"
                        height="40px"
                    />
                </Col>

                {/* Right Links */}
                <Col className="d-flex justify-content-start flex-grow-1 gap-3">
                    <Link to="/contact" className="nav-link">Contact</Link>
                    <Link to="/story" className="nav-link">Our Story</Link>
                </Col>
            </Row>

            {/* RSVP Button for Small Screens */}
            <Row className="g-0 mt-3 justify-content-center d-sm-none">
                <CustomButton
                    text="RSVP"
                    onClick={handleClick}
                    variant="dark"
                    width="80px"
                />
            </Row>
        </Container>
    );
};

export default WeddingHeader;
// components/main/PhotoGalleryComponent.tsx
import React, { useState } from "react";
import { RowsPhotoAlbum } from "react-photo-album";
import "react-photo-album/rows.css";
import Lightbox from "yet-another-react-lightbox";
import "yet-another-react-lightbox/styles.css";
import Thumbnails from "yet-another-react-lightbox/plugins/thumbnails";
import Zoom from "yet-another-react-lightbox/plugins/zoom";
import "yet-another-react-lightbox/plugins/thumbnails.css";
import useGetPhotoMetadata, {PhotoMetadata} from "../../hooks/gallery/useGetPhotoMetadata";
import { Container, Row } from "react-bootstrap";
import SortableGallery from "../shared/SortableGallery/SortableGallery";
import { arrayMove } from "@dnd-kit/sortable";
import { useChangeImageOrder } from "../../hooks/gallery/useChangeImageOrder";
import { useDeleteImage } from "../../hooks/gallery/useDeleteImage";

const PhotoGalleryComponent: React.FC<{ makeDraggable?: boolean }> = ({ makeDraggable = false }) => {
    const [index, setIndex] = useState<number>(-1);

    // Our generic hook returns { data, setData, loading, error }
    const { data, setData, loading, error } = useGetPhotoMetadata();

    // Get the execute functions from the specialized hooks.
    const { execute: changeImageOrder } = useChangeImageOrder();
    const { execute: deleteImage } = useDeleteImage();

    if (loading) return <div>Loading...</div>;
    if (error) return <div>Error: {error}</div>;
    if (!data || data.length === 0) return <div>No photos available.</div>;

    const handleMovePhoto = (oldIndex: number, newIndex: number) => {
        if (oldIndex === newIndex) return;

        const movingImageId = data[oldIndex].imageId;
        let previousImageId: string | null;
        let followingImageId: string | null;

        if (oldIndex < newIndex) {
            previousImageId = data[newIndex].imageId;
            followingImageId = newIndex >= data.length - 1 ? null : data[newIndex + 1].imageId;
        } else {
            previousImageId = newIndex <= 0 ? null : data[newIndex - 1].imageId;
            followingImageId = data[newIndex].imageId;
        }

        // Update image order using the generic hook
        changeImageOrder(movingImageId, previousImageId, followingImageId);

        // Locally update the photo order
        const newData = arrayMove(data, oldIndex, newIndex);
        setData(newData);
    };

    const commonComponentsProps = () => ({
        image: {
            style: {
                border: "2px solid var(--main-dark)",
                padding: "1px",
            },
        },
    });

    const handleDelete = (photo: PhotoMetadata, event: React.MouseEvent<HTMLButtonElement>) => {
        event.preventDefault();
        event.stopPropagation();

        // Call the generic deleteImage function
        deleteImage(photo.imageId);
        setData(prevData => prevData.filter((item: PhotoMetadata) => item.imageId !== photo.imageId));
    };

    return (
        <Container>
            <Row className="justify-content-center mb-5">
                <div className="col-11">
                    {makeDraggable ? (
                        <SortableGallery
                            gallery={RowsPhotoAlbum}
                            photos={data}
                            movePhoto={handleMovePhoto}
                            handleDelete={handleDelete}
                            componentsProps={commonComponentsProps}
                            targetRowHeight={175}
                        />
                    ) : (
                        <RowsPhotoAlbum
                            photos={data}
                            targetRowHeight={175}
                            onClick={({ index }) => setIndex(index)}
                            componentsProps={commonComponentsProps}
                        />
                    )}
                </div>
            </Row>
            {!makeDraggable && (
                <Lightbox
                    slides={data}
                    open={index >= 0}
                    index={index}
                    close={() => setIndex(-1)}
                    plugins={[Thumbnails, Zoom]}
                />
            )}
        </Container>
    );
};

export default PhotoGalleryComponent;
// components/main/Contact.tsx
import React from 'react';
import { Container } from 'react-bootstrap';
import '../../styles/StoryContent.css';

const Contact: React.FC = () => {
    return (
        <Container fluid className="text-center">
            <h1 className="text-center mb-3">Contact</h1>
            <div className="story text-center mb-3">
                Plz Don&apos;t...
            </div>
        </Container>
    );
};

export default Contact;
// components/main/BaseLayout.tsx
import React from 'react';
import { Container, Row } from 'react-bootstrap';
import Header from "./headerComponents/Header";

interface BaseLayoutProps {
    children: React.ReactNode;
}

const BaseLayout: React.FC<BaseLayoutProps> = ({ children }) => {
    return (
        <Container fluid className="d-flex flex-column min-vh-100 p-0" style={{ paddingBottom: 'env(safe-area-inset-bottom)' }}>
            <Row className="g-0">
                <Header />
            </Row>
            <Row className="flex-grow-1 g-0">
                {children}
            </Row>
        </Container>
    );
};

export default BaseLayout;
// components/main/InfoContainer.tsx
import React from 'react';
import { Col, Container, Row } from "react-bootstrap";

interface InfoElement {
    header: string | number;
    body: string | number;
}

interface InfoContainerProps {
    title: string;
    elements: InfoElement[];
}

const InfoContainer: React.FC<InfoContainerProps> = (props) => {
    return (
        <Container fluid>
            <h1 className="text-center mb-4">{props.title}</h1>
            <Row className="g-0 justify-content-around align-items-center">
                {props.elements.map((item, index) => (
                    <Col key={index} className="text-center">
                        <p className="info_element">{item.header}</p>
                        <p className="info_element">{item.body}</p>
                    </Col>
                ))}
            </Row>
        </Container>
    );
};

export default InfoContainer;
// components/main/Countdown.tsx
import React, { useEffect, useState } from 'react';
import InfoContainer from "./InfoContainer";

const Countdown: React.FC = () => {
    const calculateTimeLeft = () => {
        const weddingDate = new Date('2025-09-13T10:00:00');
        const now = new Date();
        const difference = weddingDate.getTime() - now.getTime();

        let timeLeft: { days?: number; hours?: number; minutes?: number; seconds?: number } = {};
        if (difference > 0) {
            timeLeft = {
                days: Math.floor(difference / (1000 * 60 * 60 * 24)),
                hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
                minutes: Math.floor((difference / 1000 / 60) % 60),
                seconds: Math.floor((difference / 1000) % 60),
            };
        }
        return timeLeft;
    };

    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());

    useEffect(() => {
        const timer = setTimeout(() => {
            setTimeLeft(calculateTimeLeft());
        }, 1000);
        return () => clearTimeout(timer);
    });

    const schedule = [
        { header: timeLeft.days ?? 0, body: 'Days' },
        { header: timeLeft.hours ?? 0, body: 'Hours' },
        { header: timeLeft.minutes ?? 0, body: 'Minutes' },
        { header: timeLeft.seconds ?? 0, body: 'Seconds' },
    ];

    return (
        <div className="bg-dark text-white py-4">
            <InfoContainer title="Countdown" elements={schedule} />
        </div>
    );
};

export default Countdown;
// components/main/Schedule.tsx
import React from 'react';
import InfoContainer from "./InfoContainer";

const Schedule: React.FC = () => {
    const schedule = [
        { header: '10:00 AM', body: 'Mass' },
        { header: '5:00 PM', body: 'Cocktail' },
        { header: '6:30 PM', body: 'Dinner' },
        { header: '8:00 PM', body: 'Dance' },
    ];

    return (
        <div className="bg-dark text-white py-5">
            <InfoContainer title="Schedule" elements={schedule} />
        </div>
    );
};

export default Schedule;
// components/main/Story.tsx
import React from 'react';
import { Container, Image } from 'react-bootstrap';
import '../../styles/StoryContent.css';

const Story: React.FC = () => {
    return (
        <Container className="text-center">
            <h1 className="text-center mb-3">Our Story</h1>
            <div className="story text-center mb-3">
                Legend says that Kevin Loves Olivia. Some have even said that Olivia loves Kevin back.
                But Kevin at least made a website for her.
            </div>
            <Image src="/assets/Story.jpg" alt="Story Image" className="gallery-image" />
        </Container>
    );
};

export default Story;
// components/main/timeline/Timeline.tsx
import React from "react";
import { timelineEvents } from "./timelineData";
import TimelineItem from "./TimelineItem";
import '../../../styles/Timeline.css';

const Timeline: React.FC = () => {
    const padding = 150;
    const buffer = 125;
    const containerHeight = 50 + padding + buffer + (timelineEvents.length - 2) * padding + 100;

    return (
        <div className="timeline-container" style={{ height: containerHeight }}>
            <div className="spiral-top">
                <svg width="40" height="60" viewBox="0 0 40 60" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                        d="M 20 58 V 45 C 20 42 21 41 23 40 C 43 33 38 3 17 6 C 4 8 0 21 7 28 C 13 35 25 30 25 21 C 25 14 16 12 14 20"
                        stroke="var(--main-dark)"
                        strokeWidth="var(--line-width)"
                        strokeLinecap="round"
                    />
                </svg>
            </div>
            {timelineEvents.map((event, index) => {
                const isLast = index === timelineEvents.length - 1;
                const position = isLast ? "center" : index % 2 === 1 ? "left" : "right";
                return (
                    <TimelineItem
                        key={index}
                        position={position}
                        topOffset={index * padding + buffer}
                        {...event}
                    />
                );
            })}
        </div>
    );
};

export default Timeline;
// components/main/timeline/TimelineItem.tsx
import React from "react";
import '../../../styles/Timeline.css';
import { Container, Row } from "react-bootstrap";

interface TimelineDetailsProps {
    image: string;
    time: string;
    title: string;
    location?: string;
    height?: number;
}

const TimelineDetails: React.FC<TimelineDetailsProps> = ({ image, time, title, location, height = 130 }) => {
    return (
        <>
            <Row className="event-image" style={{ minHeight: height }}>
                <div
                    className="icon"
                    style={{
                        WebkitMask: `url(${image}) no-repeat center/contain`,
                        mask: `url(${image}) no-repeat center/contain`,
                    }}
                />
            </Row>
            <Row className="m-0 event-time">{time}</Row>
            <Container className="m-0 g-0" style={{ minHeight: height }}>
                <div className="event-title">{title}</div>
                <div className="event-location">{location}</div>
            </Container>
        </>
    );
};


interface TimelineItemProps {
    position: "left" | "right" | "center";
    topOffset: number;
    time: string;
    title: string;
    location?: string;
    image: string;
}

const TimelineItem: React.FC<TimelineItemProps> = ({ position, topOffset, time, title, location, image }) => {
    if (position === "center") {
        return (
            <Container className="timeline-item center">
                <TimelineDetails image={image} location={location} time={time} title={title} height={0} />
            </Container>
        );
    }

    const halfArcClass = position === "left" ? "right-half" : "left-half";

    return (
        <div className={`timeline-item ${position}`} style={{ top: topOffset }}>
            <div className="intersection">
                <div className="circle circle-1" />
                <div className="circle circle-2" />
                <div className="circle circle-3" />
                <div className={`arc half ${halfArcClass}`} />
            </div>
            <Container className="event-content">
                <TimelineDetails image={image} location={location} time={time} title={title} />
            </Container>
        </div>
    );
};

export default TimelineItem;
// components/main/timeline/timelineData.ts
import adoration from "../../../assets/icons/Adoration.png";
import ceremony from "../../../assets/icons/Cerimony.png";
import cocktail from "../../../assets/icons/Cocktail.png";
import food from "../../../assets/icons/Food.png";
import party from "../../../assets/icons/Party.png";
import tea from "../../../assets/icons/Tea.png";
import sendoff from "../../../assets/icons/Sendoff.png";

export interface TimelineEvent {
    time: string;
    title: string;
    location?: string;
    image: string;
}

export const timelineEvents: TimelineEvent[] = [
    {
        time: "10:00 AM",
        title: "Ceremony",
        location: "Blessed Sacrament",
        image: ceremony,
    },
    {
        time: "11:00 AM",
        title: "Holy Hour",
        location: "Newman Center",
        image: adoration,
    },
    {
        time: "5:00 PM",
        title: "Cocktail Hour",
        location: "Pickering Barn",
        image: cocktail,
    },
    {
        time: "6:00 PM",
        title: "Dinner",
        location: "Pickering Barn",
        image: food,
    },
    {
        time: "7:30 PM",
        title: "PARTY!",
        location: "Dance Floor",
        image: party,
    },
    {
        time: "9:00 PM",
        title: "Chai Bar",
        image: tea,
    },
    {
        time: "10:30 PM",
        title: "Send Off",
        image: sendoff,
    },
];
// components/main/MainPhoto.tsx
import React from 'react';
import { Container, Image } from 'react-bootstrap';
import '../../styles/MainPhoto.css';

const MainPhoto: React.FC = () => {
    return (
        <Container className="position-relative p-0">
            <Image src="/assets/mainCoupleImage.jpeg" alt="Main Image" className="main-image position-absolute w-100 h-100" />
            <h3 className="date-text position-absolute w-100 h-100 justify-content-center align-items-center">
                09 . 13. 2025
            </h3>
        </Container>
    );
};

export default MainPhoto;
// components/main/WeddingDetails.tsx
import React from 'react';
import InfoContainer from "./InfoContainer";

const WeddingDetails: React.FC = () => {
    const details = [
        { header: 'Blessed Sacrament', body: '5050 8th Ave NE, Seattle, WA' },
        { header: 'Venue Location', body: 'TBD' },
        { header: 'Black Tie Optional', body: '' },
    ];

    return (
        <div className="container my-5">
            <InfoContainer title="Wedding Details" elements={details} />
        </div>
    );
};

export default WeddingDetails;
